{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts';\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action(_ref) {\n  let {\n    request\n  } = _ref;\n  const data = await request.formData();\n  const authData = {\n    username: data.get('username'),\n    password: data.get('password')\n  };\n  console.log(authData['username']);\n  apiCallString += \"?filter=username='\" + authData['username'].trim() + \"'\";\n  let userRecListRaw = await fetch(apiCallString);\n  let userRecList = await userRecListRaw.json();\n  if (userRecList.length == 0) {\n    alert('invalid user ID');\n    return false;\n  }\n  let userRec = userRecList[0];\n  if (userRec['password'].localeCompare(authData['password']) != 0) {\n    alert('invalid password');\n    return false;\n\n    // const response = await fetch(\n    //     // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n    //     // 'https://localhost:8080'+'login', \n    // {\n    //     method: 'POST',\n    //     header:{\n    //         'Content_Type': 'application/json'\n    //     },\n    //     body: JSON.stringify(authData)\n    // }\n    // );\n\n    // if (response.status === 422 || response.status === 401 ) {\n    //     return response;\n    // }\n    // if (!response.ok) {\n    //     throw json({message: 'Could not authenticate user.' }, { status: 500});\n    // }\n\n    // return redirect('/product')\n  }\n}\n// var apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts'\n\n// const data = await request.formData();\n// const authData = {\n//         username: data.get('username'),\n//         password: data.get('password'),\n//     };\n\n// LoginValidation(authData['username'],authData['password'],apiCallString)\n\n// const LoginValidation = async (username, password, apiCallString) => \n// {\n//    apiCallString += \"?filter=username='\" + username.trim() + \"'\"\n\n//    let userRecListRaw = await fetch(apiCallString);\n//    let userRecList =  await userRecListRaw.json();\n\n//    if (userRecList.length == 0) {\n//      alert('invalid user ID');\n//      return false;\n//    }\n\n//    let userRec = userRecList[0]\n\n//    if (userRec['password'].localeCompare(password) != 0) {\n//      alert('invalid password');\n//      return false;\n//    }\n\n//    return redirect('/product');\n//  };\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","apiCallString","AuthenticationPage","action","request","data","formData","authData","username","get","password","console","log","trim","userRecListRaw","fetch","userRecList","length","alert","userRec","localeCompare"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nconst apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts'\n\nfunction AuthenticationPage() {\n    return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}) {\n    const data = await request.formData();\n    const authData = {\n        username: data.get('username'),\n        password: data.get('password'),\n    };\n\n    console.log(authData['username']);\n\n   apiCallString += \"?filter=username='\" + authData['username'].trim() + \"'\"\n   \n   let userRecListRaw = await fetch(apiCallString);\n   let userRecList =  await userRecListRaw.json();\n\n   if (userRecList.length == 0) {\n     alert('invalid user ID');\n     return false;\n   }\n   \n   let userRec = userRecList[0]\n\n   if (userRec['password'].localeCompare(authData['password']) != 0) {\n     alert('invalid password');\n     return false;\n    \n\n    // const response = await fetch(\n    //     // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n    //     // 'https://localhost:8080'+'login', \n    // {\n    //     method: 'POST',\n    //     header:{\n    //         'Content_Type': 'application/json'\n    //     },\n    //     body: JSON.stringify(authData)\n    // }\n    // );\n\n    // if (response.status === 422 || response.status === 401 ) {\n    //     return response;\n    // }\n    // if (!response.ok) {\n    //     throw json({message: 'Could not authenticate user.' }, { status: 500});\n    // }\n\n    // return redirect('/product')\n\n\n \n}}\n// var apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts'\n\n// const data = await request.formData();\n// const authData = {\n//         username: data.get('username'),\n//         password: data.get('password'),\n//     };\n\n\n// LoginValidation(authData['username'],authData['password'],apiCallString)\n\n// const LoginValidation = async (username, password, apiCallString) => \n// {\n//    apiCallString += \"?filter=username='\" + username.trim() + \"'\"\n   \n//    let userRecListRaw = await fetch(apiCallString);\n//    let userRecList =  await userRecListRaw.json();\n\n//    if (userRecList.length == 0) {\n//      alert('invalid user ID');\n//      return false;\n//    }\n   \n//    let userRec = userRecList[0]\n\n//    if (userRec['password'].localeCompare(password) != 0) {\n//      alert('invalid password');\n//      return false;\n//    }\n\n//    return redirect('/product');\n//  };\n\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC;AAE9C,MAAMC,aAAa,GAAG,6DAA6D;AAEnF,SAASC,kBAAkB,GAAG;EAC1B,oBAAO,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AACvB;AAAC,KAFQA,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeC,MAAM,OAAY;EAAA,IAAX;IAACC;EAAO,CAAC;EAClC,MAAMC,IAAI,GAAG,MAAMD,OAAO,CAACE,QAAQ,EAAE;EACrC,MAAMC,QAAQ,GAAG;IACbC,QAAQ,EAAEH,IAAI,CAACI,GAAG,CAAC,UAAU,CAAC;IAC9BC,QAAQ,EAAEL,IAAI,CAACI,GAAG,CAAC,UAAU;EACjC,CAAC;EAEDE,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,UAAU,CAAC,CAAC;EAElCN,aAAa,IAAI,oBAAoB,GAAGM,QAAQ,CAAC,UAAU,CAAC,CAACM,IAAI,EAAE,GAAG,GAAG;EAEzE,IAAIC,cAAc,GAAG,MAAMC,KAAK,CAACd,aAAa,CAAC;EAC/C,IAAIe,WAAW,GAAI,MAAMF,cAAc,CAAChB,IAAI,EAAE;EAE9C,IAAIkB,WAAW,CAACC,MAAM,IAAI,CAAC,EAAE;IAC3BC,KAAK,CAAC,iBAAiB,CAAC;IACxB,OAAO,KAAK;EACd;EAEA,IAAIC,OAAO,GAAGH,WAAW,CAAC,CAAC,CAAC;EAE5B,IAAIG,OAAO,CAAC,UAAU,CAAC,CAACC,aAAa,CAACb,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE;IAChEW,KAAK,CAAC,kBAAkB,CAAC;IACzB,OAAO,KAAK;;IAGb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;EAIJ;AAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}