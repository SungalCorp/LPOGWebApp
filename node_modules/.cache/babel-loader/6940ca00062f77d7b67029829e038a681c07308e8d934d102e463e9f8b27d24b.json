{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp/src/components/api.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Store from './Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Api = () => {\n  _s();\n  // fetch data\n  const [planogram, setPlanogram] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  const transformPOGData = data => {\n    if (data.length === 0) return [];\n    let storeData = [],\n      gondolaList = [],\n      shelfList = [];\n    let currGondolaID = data[0][\"displayfixtureID\"];\n    let currShelfID = data[0][\"shelfID\"];\n\n    // go through facings, placing them in groupings \n    // according to gondola and shelf\n    for (var facing of data) {\n      if (facing[\"shelfID\"] !== currShelfID) {\n        gondolaList.push(shelfList);\n        shelfList = [];\n      }\n      if (facing[\"displayfixtureID\"] !== currGondolaID) {\n        storeData.push(gondolaList);\n        gondolaList = [];\n      }\n      currGondolaID = facing[\"displayfixtureID\"];\n      currShelfID = facing[\"shelfID\"];\n      shelfList.push(facing);\n    }\n    gondolaList.push(shelfList);\n    storeData.push(gondolaList);\n    return storeData;\n  };\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb';\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const POGfacings = await response.json();\n      console.log(\"POGfacings =\", POGfacings);\n      let POGdata = transformPOGData(POGfacings);\n      setPlanogram(POGdata);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no planograms.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 15\n  }, this);\n  if (planogram.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(Store, {\n      gondolas: planogram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Api, \"4Xajw4Rqf5WU/rQQFR8/XIo+LCw=\");\n_c = Api;\nexport default Api;\nvar _c;\n$RefreshReg$(_c, \"Api\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","Store","Api","planogram","setPlanogram","isLoading","setIsloading","error","setError","transformPOGData","data","length","storeData","gondolaList","shelfList","currGondolaID","currShelfID","facing","push","fetchPlanogramsHandler","url","response","fetch","ok","Error","POGfacings","json","console","log","POGdata","message","content"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/components/api.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport Store from './Store';\n\nconst Api = () => {\n\n// fetch data\nconst [planogram, setPlanogram] = useState([])\nconst [isLoading, setIsloading] = useState(false);\nconst [error, setError] = useState(null);\n\nconst transformPOGData = (data) =>{\n\n  if (data.length === 0)return []\n\n  let storeData = [], gondolaList = [], shelfList = []\n  let currGondolaID = data[0][\"displayfixtureID\"]\n  let currShelfID =   data[0][\"shelfID\"]\n\n  // go through facings, placing them in groupings \n  // according to gondola and shelf\n  for (var facing of data) {\n    \n    if (facing[\"shelfID\"]!== currShelfID){\n      gondolaList.push(shelfList)\n      shelfList=[]\n    }\n\n    if (facing[\"displayfixtureID\"]!== currGondolaID){\n      storeData.push(gondolaList)\n      gondolaList=[]\n    }\n   \n    currGondolaID = facing[\"displayfixtureID\"]\n    currShelfID = facing[\"shelfID\"]\n\n    shelfList.push(facing)\n  }\n\n  gondolaList.push(shelfList)\n  storeData.push(gondolaList)\n  \n  return storeData\n}\n\n\n\nconst fetchPlanogramsHandler = useCallback(async () => {\n  setIsloading(true);\n  setError(null);\n  try {\n    // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n    const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong!');\n    }\n    const POGfacings =  await response.json();\n    console.log(\"POGfacings =\",POGfacings)      \n    let POGdata = transformPOGData(POGfacings)\n\n  setPlanogram(POGdata);\n\n  } catch (error) {\n    setError(error.message);\n  }\n  setIsloading(false);\n}, []);\n\nuseEffect(() => {\n  fetchPlanogramsHandler();\n}, [fetchPlanogramsHandler]);\n\n\n\n\n\nlet content = <p>Found no planograms.</p>;\n\nif (planogram.length > 0) {\n  content = <Store gondolas={planogram} />;\n}\n\nif (error) {\n  content = <p>{error}</p>;\n}\n\nif (isLoading) {\n  content = <p>Loading...</p>;\n}\n\n\nreturn (\n    <React.Fragment>\n\n      {/* <section >\n        <button onClick={fetchPlanogramsHandler}>Refresh</button>\n      </section>\n       \n      <div >\n      <img  \n            className=\"logo_img\" \n            src={logoImage}\n            alt = 'LogoImg'\n            /> \n      <img  \n            className=\"sungal_img\" \n            src={SungalImage} \n            alt = 'SungalImg'\n            /> \n\n      </div> */}\n      \n\n      <section>\n        {content}\n      </section>\n     \n    </React.Fragment>\n  )\n}\nexport default Api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}