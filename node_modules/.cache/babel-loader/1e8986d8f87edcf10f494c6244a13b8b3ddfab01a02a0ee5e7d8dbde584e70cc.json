{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\n\n// export async function action({request}) {\n//     const data = await request.formData();\n//     const authData = {\n//         username: data.get('username'),\n//         password: data.get('password'),\n//     };\n\n//     console.log(authData['username']);\n\n// const response = await fetch(\n//     // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n//     // 'https://localhost:8080'+'login', \n// {\n//     method: 'POST',\n//     header:{\n//         'Content_Type': 'application/json'\n//     },\n//     body: JSON.stringify(authData)\n// }\n// );\n\n// if (response.status === 422 || response.status === 401 ) {\n//     return response;\n// }\n// if (!response.ok) {\n//     throw json({message: 'Could not authenticate user.' }, { status: 500});\n// }\n\n//     return redirect('/product')\n\n// }\nvar apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts';\nconst LoginValidation = async (username, password, apiCallString) => {\n  apiCallString += \"?filter=username='\" + username.trim() + \"'\";\n  let userRecListRaw = await fetch(apiCallString);\n  let userRecList = await userRecListRaw.json();\n  if (userRecList.length == 0) {\n    alert('invalid user ID');\n    return false;\n  }\n  let userRec = userRecList[0];\n  if (userRec['password'].localeCompare(password) != 0) {\n    alert('invalid password');\n    return false;\n  }\n  return redirect('/product');\n};\n_c2 = LoginValidation;\nconst data = await request.formData();\nconst authData = {\n  username: data.get('username'),\n  password: data.get('password')\n};\nLoginValidation(authData['username'], authData['password'], apiCallString);\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthenticationPage\");\n$RefreshReg$(_c2, \"LoginValidation\");","map":{"version":3,"names":["json","redirect","AuthForm","AuthenticationPage","apiCallString","LoginValidation","username","password","trim","userRecListRaw","fetch","userRecList","length","alert","userRec","localeCompare","data","request","formData","authData","get"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n    return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\n// export async function action({request}) {\n//     const data = await request.formData();\n//     const authData = {\n//         username: data.get('username'),\n//         password: data.get('password'),\n//     };\n\n//     console.log(authData['username']);\n\n\n    \n\n    // const response = await fetch(\n    //     // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n    //     // 'https://localhost:8080'+'login', \n    // {\n    //     method: 'POST',\n    //     header:{\n    //         'Content_Type': 'application/json'\n    //     },\n    //     body: JSON.stringify(authData)\n    // }\n    // );\n\n    // if (response.status === 422 || response.status === 401 ) {\n    //     return response;\n    // }\n    // if (!response.ok) {\n    //     throw json({message: 'Could not authenticate user.' }, { status: 500});\n    // }\n\n//     return redirect('/product')\n\n\n \n// }\nvar apiCallString = 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts'\n\nconst LoginValidation = async (username, password, apiCallString) => \n{\n   apiCallString += \"?filter=username='\" + username.trim() + \"'\"\n   \n   let userRecListRaw = await fetch(apiCallString);\n   let userRecList =  await userRecListRaw.json();\n\n   if (userRecList.length == 0) {\n     alert('invalid user ID');\n     return false;\n   }\n   \n   let userRec = userRecList[0]\n\n   if (userRec['password'].localeCompare(password) != 0) {\n     alert('invalid password');\n     return false;\n   }\n\n   return redirect('/product');\n };\n\nconst data = await request.formData();\nconst authData = {\n        username: data.get('username'),\n        password: data.get('password'),\n    };\n\n\nLoginValidation(authData['username'],authData['password'],apiCallString)"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC;AAE9C,SAASC,kBAAkB,GAAG;EAC1B,oBAAO,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AACvB;AAAC,KAFQA,kBAAkB;AAI3B,eAAeA,kBAAkB;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEJ;;AAIA;AACA,IAAIC,aAAa,GAAG,6DAA6D;AAEjF,MAAMC,eAAe,GAAG,OAAOC,QAAQ,EAAEC,QAAQ,EAAEH,aAAa,KAChE;EACGA,aAAa,IAAI,oBAAoB,GAAGE,QAAQ,CAACE,IAAI,EAAE,GAAG,GAAG;EAE7D,IAAIC,cAAc,GAAG,MAAMC,KAAK,CAACN,aAAa,CAAC;EAC/C,IAAIO,WAAW,GAAI,MAAMF,cAAc,CAACT,IAAI,EAAE;EAE9C,IAAIW,WAAW,CAACC,MAAM,IAAI,CAAC,EAAE;IAC3BC,KAAK,CAAC,iBAAiB,CAAC;IACxB,OAAO,KAAK;EACd;EAEA,IAAIC,OAAO,GAAGH,WAAW,CAAC,CAAC,CAAC;EAE5B,IAAIG,OAAO,CAAC,UAAU,CAAC,CAACC,aAAa,CAACR,QAAQ,CAAC,IAAI,CAAC,EAAE;IACpDM,KAAK,CAAC,kBAAkB,CAAC;IACzB,OAAO,KAAK;EACd;EAEA,OAAOZ,QAAQ,CAAC,UAAU,CAAC;AAC7B,CAAC;AAAC,MApBGI,eAAe;AAsBrB,MAAMW,IAAI,GAAG,MAAMC,OAAO,CAACC,QAAQ,EAAE;AACrC,MAAMC,QAAQ,GAAG;EACTb,QAAQ,EAAEU,IAAI,CAACI,GAAG,CAAC,UAAU,CAAC;EAC9Bb,QAAQ,EAAES,IAAI,CAACI,GAAG,CAAC,UAAU;AACjC,CAAC;AAGLf,eAAe,CAACc,QAAQ,CAAC,UAAU,CAAC,EAACA,QAAQ,CAAC,UAAU,CAAC,EAACf,aAAa,CAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}