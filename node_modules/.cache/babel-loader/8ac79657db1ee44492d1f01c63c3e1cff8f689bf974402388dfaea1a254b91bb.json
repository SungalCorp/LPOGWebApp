{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Store from './components/Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar logoImage = require('../src/imgs/LIVINGPOG.png');\nvar SungalImage = require('../src/imgs/SUNGAL.png');\nconst App = () => {\n  _s();\n  // fetch data\n  const [planogram, setPlanogram] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const transformPOGData = (data) =>{\n\n  //   if (data.length === 0)return []\n\n  //   let storeData = [], gondolaList = [], shelfList = []\n  //   let currGondolaID = data[0][\"displayfixtureID\"]\n  //   let currShelfID =   data[0][\"shelfID\"]\n\n  //   // go through facings, placing them in groupings \n  //   // according to gondola and shelf\n  //   for (var facing of data) {\n\n  //     if (facing[\"shelfID\"]!== currShelfID){\n  //       gondolaList.push(shelfList)\n  //       shelfList=[]\n  //     }\n\n  //     if (facing[\"displayfixtureID\"]!== currGondolaID){\n  //       storeData.push(gondolaList)\n  //       gondolaList=[]\n  //     }\n\n  //     currGondolaID = facing[\"displayfixtureID\"]\n  //     currShelfID = facing[\"shelfID\"]\n\n  //     shelfList.push(facing)\n  //   }\n\n  //   gondolaList.push(shelfList)\n  //   storeData.push(gondolaList)\n\n  //   return storeData\n  // }\n\n  // const fetchPlanogramsHandler = useCallback(async () => {\n  //   setIsloading(true);\n  //   setError(null);\n  //   try {\n  //     // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n  //     const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n  //     const response = await fetch(url);\n\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n  //     const POGfacings =  await response.json();\n  //     console.log(\"POGfacings =\",POGfacings)      \n  //     let POGdata = transformPOGData(POGfacings)\n\n  //   setPlanogram(POGdata);\n\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsloading(false);\n  // }, []);\n\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no planograms.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 17\n  }, this);\n  if (planogram.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(Store, {\n      gondolas: planogram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlanogramsHandler,\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo_img\",\n        src: logoImage,\n        alt: \"LogoImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"sungal_img\",\n        src: SungalImage,\n        alt: \"SungalImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QEDxpjKwylE5i1+zicjPEyxzsyI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","Store","logoImage","require","SungalImage","App","planogram","setPlanogram","isLoading","setIsloading","error","setError","fetchPlanogramsHandler","content","length"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Store from './components/Store';\n\n\nvar logoImage = require('../src/imgs/LIVINGPOG.png')\nvar SungalImage = require('../src/imgs/SUNGAL.png')\n\n\n\nconst App = () => {\n\n\n// fetch data\n  const [planogram, setPlanogram] = useState([])\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const transformPOGData = (data) =>{\n\n  //   if (data.length === 0)return []\n\n  //   let storeData = [], gondolaList = [], shelfList = []\n  //   let currGondolaID = data[0][\"displayfixtureID\"]\n  //   let currShelfID =   data[0][\"shelfID\"]\n\n  //   // go through facings, placing them in groupings \n  //   // according to gondola and shelf\n  //   for (var facing of data) {\n      \n  //     if (facing[\"shelfID\"]!== currShelfID){\n  //       gondolaList.push(shelfList)\n  //       shelfList=[]\n  //     }\n\n  //     if (facing[\"displayfixtureID\"]!== currGondolaID){\n  //       storeData.push(gondolaList)\n  //       gondolaList=[]\n  //     }\n     \n  //     currGondolaID = facing[\"displayfixtureID\"]\n  //     currShelfID = facing[\"shelfID\"]\n\n  //     shelfList.push(facing)\n  //   }\n\n  //   gondolaList.push(shelfList)\n  //   storeData.push(gondolaList)\n    \n  //   return storeData\n  // }\n\n\n\n  // const fetchPlanogramsHandler = useCallback(async () => {\n  //   setIsloading(true);\n  //   setError(null);\n  //   try {\n  //     // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n  //     const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n  //     const response = await fetch(url);\n\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n  //     const POGfacings =  await response.json();\n  //     console.log(\"POGfacings =\",POGfacings)      \n  //     let POGdata = transformPOGData(POGfacings)\n\n  //   setPlanogram(POGdata);\n\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsloading(false);\n  // }, []);\n\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n\n\n\n\n\n  let content = <p>Found no planograms.</p>;\n\n  if (planogram.length > 0) {\n    content = <Store gondolas={planogram} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n\n\n\n  return (\n    <React.Fragment>\n\n      <section >\n        <button onClick={fetchPlanogramsHandler}>Refresh</button>\n      </section>\n       \n      <div >\n      <img  \n            className=\"logo_img\" \n            src={logoImage}\n            alt = 'LogoImg'\n            /> \n      <img  \n            className=\"sungal_img\" \n            src={SungalImage} \n            alt = 'SungalImg'\n            /> \n\n      </div>\n      \n\n      <section>\n        {content}\n      </section>\n     \n    </React.Fragment>\n  )\n\n}\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC/D;AACA,OAAOC,KAAK,MAAM,oBAAoB;AAAC;AAGvC,IAAIC,SAAS,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AACpD,IAAIC,WAAW,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAInD,MAAME,GAAG,GAAG,MAAM;EAAA;EAGlB;EACE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACda,sBAAsB,EAAE;EAC1B,CAAC,EAAE,CAACA,sBAAsB,CAAC,CAAC;EAM5B,IAAIC,OAAO,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAA2B;EAEzC,IAAIP,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;IACxBD,OAAO,gBAAG,QAAC,KAAK;MAAC,QAAQ,EAAEP;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1C;EAEA,IAAII,KAAK,EAAE;IACTG,OAAO,gBAAG;MAAA,UAAIH;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EAC1B;EAEA,IAAIF,SAAS,EAAE;IACbK,OAAO,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB;EAC7B;EAMA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBAEb;MAAA,uBACE;QAAQ,OAAO,EAAED,sBAAuB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAiB;MAAA;MAAA;MAAA;IAAA,QACjD,eAEV;MAAA,wBACA;QACM,SAAS,EAAC,UAAU;QACpB,GAAG,EAAEV,SAAU;QACf,GAAG,EAAG;MAAS;QAAA;QAAA;QAAA;MAAA,QACb,eACR;QACM,SAAS,EAAC,YAAY;QACtB,GAAG,EAAEE,WAAY;QACjB,GAAG,EAAG;MAAW;QAAA;QAAA;QAAA;MAAA,QACf;IAAA;MAAA;MAAA;MAAA;IAAA,QAEF,eAGN;MAAA,UACGS;IAAO;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QAEK;AAGrB,CAAC;AAAA,GA1HKR,GAAG;AAAA,KAAHA,GAAG;AA4HT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}