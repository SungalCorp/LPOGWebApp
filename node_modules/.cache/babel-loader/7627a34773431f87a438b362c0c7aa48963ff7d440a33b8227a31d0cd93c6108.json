{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp /src/pages/LivingPOG.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Client from '../components/POG/Client';\nimport { colorBarNotice } from '../lib/colorNoticeBar';\nimport { getPercentColor } from '../lib/StyleFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar logoImage = require('../imgs/LIVINGPOG.png');\nvar SungalImage = require('../imgs/SUNGAL.png');\n\n// const App = () => {\nconst LivingPOG = () => {\n  _s();\n  // fetch data\n  const [planogram, setPlanogram] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  const transformPOGData = data => {\n    /* transforms data to:\n     \n    (clientlevel)[\n                  (storeLevel)[\n                               (gondolaLevel)[\n                                              (shelfLevel)[ \n                                                           {facing},{facing}\n                                                           ]\n                                              ]\n                                ]\n                  ]\n    \n    */\n\n    if (data.length === 0) return [];\n    let clientList = [],\n      storeList = [],\n      gondolaList = [],\n      shelfList = [];\n    let currStoreID = data[0][\"storeID\"];\n    let currGondolaID = data[0][\"displayfixtureID\"];\n    let currShelfID = data[0][\"shelfID\"];\n\n    // go through facings, placing them in groupings \n    // according to gondola and shelf\n    for (var facing of data) {\n      if (facing[\"shelfID\"] !== currShelfID) {\n        gondolaList.push(shelfList);\n        shelfList = [];\n      }\n      if (facing[\"displayfixtureID\"] !== currGondolaID) {\n        storeList.push(gondolaList);\n        gondolaList = [];\n      }\n      if (facing[\"storeID\"] !== currStoreID) {\n        clientList.push(storeList);\n        storeList = [];\n      }\n      currStoreID = facing[\"storeID\"];\n      currGondolaID = facing[\"displayfixtureID\"];\n      currShelfID = facing[\"shelfID\"];\n      shelfList.push(facing);\n    }\n    gondolaList.push(shelfList);\n    storeList.push(gondolaList);\n    clientList.push(storeList);\n    return clientList;\n  };\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7';\n      // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const POGfacings = await response.json();\n      console.log(\"POGfacings =\", POGfacings);\n      let POGdata = transformPOGData(POGfacings);\n      setPlanogram(POGdata);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no planograms.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 17\n  }, this);\n  if (planogram.length > 0) {\n    //content = <Store gondolas={planogram} />;\n    content = /*#__PURE__*/_jsxDEV(Client, {\n      stores: planogram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo_img\",\n        src: logoImage,\n        alt: \"LogoImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"sungal_img\",\n        src: SungalImage,\n        alt: \"SungalImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"colorBarNotice\", {\n        percent: '10%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-tag-notice\",\n        style: {\n          backgroundColor: getPercentColor('30')\n        },\n        children: '20%-40%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-tag-notice\",\n        style: {\n          backgroundColor: getPercentColor('50')\n        },\n        children: '40%-60%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-tag-notice\",\n        style: {\n          backgroundColor: getPercentColor('70')\n        },\n        children: '60%-80%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-tag-notice\",\n        style: {\n          backgroundColor: getPercentColor('85')\n        },\n        children: '80%-90%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-tag-notice\",\n        style: {\n          backgroundColor: getPercentColor('99')\n        },\n        children: '90%-100%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n// export default App;\n_s(LivingPOG, \"4Xajw4Rqf5WU/rQQFR8/XIo+LCw=\");\n_c = LivingPOG;\nexport default LivingPOG;\nvar _c;\n$RefreshReg$(_c, \"LivingPOG\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","Client","colorBarNotice","getPercentColor","logoImage","require","SungalImage","LivingPOG","planogram","setPlanogram","isLoading","setIsloading","error","setError","transformPOGData","data","length","clientList","storeList","gondolaList","shelfList","currStoreID","currGondolaID","currShelfID","facing","push","fetchPlanogramsHandler","url","response","fetch","ok","Error","POGfacings","json","console","log","POGdata","message","content","backgroundColor"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp /src/pages/LivingPOG.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport Client from '../components/POG/Client';\nimport { colorBarNotice } from '../lib/colorNoticeBar';\nimport { getPercentColor } from '../lib/StyleFunctions';\n\nvar logoImage = require('../imgs/LIVINGPOG.png')\nvar SungalImage = require('../imgs/SUNGAL.png')\n\n\n// const App = () => {\nconst LivingPOG = () => {\n\n\n// fetch data\n  const [planogram, setPlanogram] = useState([])\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const transformPOGData = (data) =>{\n    /* transforms data to:\n     \n    (clientlevel)[\n                  (storeLevel)[\n                               (gondolaLevel)[\n                                              (shelfLevel)[ \n                                                           {facing},{facing}\n                                                           ]\n                                              ]\n                                ]\n                  ]\n    \n    */\n\n    if (data.length === 0)return []\n\n    let clientList    = [], storeList = [], gondolaList = [], shelfList = []\n    let currStoreID   = data[0][\"storeID\"]\n    let currGondolaID = data[0][\"displayfixtureID\"]\n    let currShelfID   = data[0][\"shelfID\"]\n\n    // go through facings, placing them in groupings \n    // according to gondola and shelf\n    for (var facing of data) {\n      \n      if (facing[\"shelfID\"]!== currShelfID){\n        gondolaList.push(shelfList)\n        shelfList=[]\n      }\n\n      if (facing[\"displayfixtureID\"]!== currGondolaID){\n        storeList.push(gondolaList)\n        gondolaList=[]\n      }\n\n      if (facing[\"storeID\"]!== currStoreID){\n        clientList.push(storeList)\n        storeList=[]\n      }\n      currStoreID = facing[\"storeID\"]\n      currGondolaID = facing[\"displayfixtureID\"]\n      currShelfID = facing[\"shelfID\"]\n      shelfList.push(facing)\n    }\n\n    gondolaList.push(shelfList)\n    storeList.push(gondolaList)\n    clientList.push(storeList)\n    return clientList\n  }\n\n\n\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n      // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const POGfacings =  await response.json();\n      console.log(\"POGfacings =\",POGfacings)      \n      let POGdata = transformPOGData(POGfacings)\n\n    setPlanogram(POGdata);\n\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n\n\n\n\n\n  let content = <p>Found no planograms.</p>;\n\n  if (planogram.length > 0) {\n    //content = <Store gondolas={planogram} />;\n    content = <Client stores={planogram} />;\n\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n\n\n  return (\n    <div>\n  \n      <div>\n      <img  \n            className=\"logo_img\" \n            src={logoImage}\n            alt = 'LogoImg'\n            /> \n\n       \n      <img  \n            className=\"sungal_img\" \n            src={SungalImage} \n            alt = 'SungalImg'\n            /> \n   \n      {/* <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('10')}}>\n      <span style={{ marginLeft: '100px' }}>{'<20'}%</span>\n      </div>  */}\n\n      <colorBarNotice percent={'10%'}/>\n      <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('30')}}>{'20%-40%'}</div> \n      <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('50')}}>{'40%-60%'}</div> \n      <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('70')}}>{'60%-80%'}</div> \n      <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('85')}}>{'80%-90%'}</div> \n      <div className=\"percentage-tag-notice\" style={{backgroundColor: getPercentColor('99')}}>{'90%-100%'}</div> \n\n      </div>\n      \n\n      <section>\n        {content}\n      </section>\n     \n    </div>\n  )\n\n}\n\n// export default App;\nexport default LivingPOG;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}