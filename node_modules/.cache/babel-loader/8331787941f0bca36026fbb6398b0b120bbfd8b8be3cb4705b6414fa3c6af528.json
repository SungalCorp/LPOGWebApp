{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action(_ref) {\n  let {\n    request\n  } = _ref;\n  const data = await request.formData();\n  const authData = {\n    username: data.get('username'),\n    password: data.get('password')\n  };\n  const response = await fetch(\n  // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n  'https://localhost:8080', {\n    method: 'POST',\n    header: {\n      'Content_Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not authenticate user.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/product');\n}\n\n// const LoginValidation = (username, passWord, apiCallString) => \n// {\n//    apiCallString += \"?filter=username='\" + username.trim() + \"'\"\n\n//    let userRecListRaw = await fetch(apiCallString);\n//    let userRecList =  await userRecListRaw.json();\n\n//    if (userRecList.length == 0) {\n//      alert('invalid user ID');\n//      return false;\n//    }\n\n//    let userRec = userRecList[0]\n\n//    if (userRec['password'].localeCompare(password) != 0) {\n//      alert('invalid password');\n//      return false;\n//    }\n\n//    return true;\n//  };\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","AuthenticationPage","action","request","data","formData","authData","username","get","password","response","fetch","method","header","body","JSON","stringify","status","ok","message"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n    return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}) {\n    const data = await request.formData();\n    const authData = {\n        username: data.get('username'),\n        password: data.get('password'),\n    };\n\n    const response = await fetch(\n        // 'https://apiserver.sungalcorp.synology.me/dbGet_useraccounts', \n        'https://localhost:8080', \n    {\n        method: 'POST',\n        header:{\n            'Content_Type': 'application/json'\n        },\n        body: JSON.stringify(authData)\n    }\n    );\n\n    if (response.status === 422 || response.status === 401 ) {\n        return response;\n    }\n    if (!response.ok) {\n        throw json({message: 'Could not authenticate user.' }, { status: 500});\n    }\n\n    return redirect('/product')\n\n\n \n}\n\n// const LoginValidation = (username, passWord, apiCallString) => \n// {\n//    apiCallString += \"?filter=username='\" + username.trim() + \"'\"\n   \n//    let userRecListRaw = await fetch(apiCallString);\n//    let userRecList =  await userRecListRaw.json();\n\n//    if (userRecList.length == 0) {\n//      alert('invalid user ID');\n//      return false;\n//    }\n   \n//    let userRec = userRecList[0]\n\n//    if (userRec['password'].localeCompare(password) != 0) {\n//      alert('invalid password');\n//      return false;\n//    }\n\n//    return true;\n//  };"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC;AAE9C,SAASC,kBAAkB,GAAG;EAC1B,oBAAO,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AACvB;AAAC,KAFQA,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeC,MAAM,OAAY;EAAA,IAAX;IAACC;EAAO,CAAC;EAClC,MAAMC,IAAI,GAAG,MAAMD,OAAO,CAACE,QAAQ,EAAE;EACrC,MAAMC,QAAQ,GAAG;IACbC,QAAQ,EAAEH,IAAI,CAACI,GAAG,CAAC,UAAU,CAAC;IAC9BC,QAAQ,EAAEL,IAAI,CAACI,GAAG,CAAC,UAAU;EACjC,CAAC;EAED,MAAME,QAAQ,GAAG,MAAMC,KAAK;EACxB;EACA,wBAAwB,EAC5B;IACIC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAC;MACH,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,QAAQ;EACjC,CAAC,CACA;EAED,IAAII,QAAQ,CAACO,MAAM,KAAK,GAAG,IAAIP,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAG;IACrD,OAAOP,QAAQ;EACnB;EACA,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;IACd,MAAMpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAA+B,CAAC,EAAE;MAAEF,MAAM,EAAE;IAAG,CAAC,CAAC;EAC1E;EAEA,OAAOlB,QAAQ,CAAC,UAAU,CAAC;AAI/B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}