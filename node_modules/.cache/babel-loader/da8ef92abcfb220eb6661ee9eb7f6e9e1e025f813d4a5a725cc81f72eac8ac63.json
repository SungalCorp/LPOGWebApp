{"ast":null,"code":"import axios from 'axios';\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const authStart = () => {\n  return {\n    type: AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=[API_KEY]';\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=[API_KEY]';\n    }\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"names":["axios","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","authStart","type","authSuccess","token","userId","authFail","error","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","catch","err","authCheckState","getItem"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp /src/components/authActions.js"],"sourcesContent":["import axios from 'axios';\n\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n\nexport const authStart = () => {\n  return {\n    type: AUTH_START\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n  return {\n    type: AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nexport const authFail = (error) => {\n  return {\n    type: AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: AUTH_LOGOUT\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const auth = (email, password, isSignup) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=[API_KEY]';\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=[API_KEY]';\n    }\n    axios.post(url, authData)\n      .then(response => {\n        const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n        localStorage.setItem('token', response.data.idToken);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('userId', response.data.localId);\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n        dispatch(checkAuthTimeout(response.data.expiresIn));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data.error));\n      });\n  };\n};\n\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}