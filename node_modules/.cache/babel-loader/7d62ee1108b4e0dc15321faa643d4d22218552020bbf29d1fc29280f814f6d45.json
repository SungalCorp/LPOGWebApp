{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Documents/Projects/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Gondola from './components/Gondula/Gondola';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [planograms, setPlanograms] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  // const gondula = [\n  //   {\n  //     id: 'e1',\n  //     title: 'Paper',\n  //     amount: 94.12,\n  //     product: new Date(2020, 7, 14),\n  //   },\n  //   { id: 'e2',\n  //     title: 'New TV', \n  //     amount: 799.49, \n  //     product: new Date(2021, 2, 12) },\n  //   {\n  //     id: 'e3',\n  //     title: 'Car Insurance',\n  //     amount: 294.67,\n  //     product: new Date(2021, 2, 28),\n  //   },\n  //   {\n  //     id: 'e4',\n  //     title: 'New Desk (Wooden)',\n  //     amount: 450,\n  //     product: new Date(2021, 5, 12),\n  //   },\n  // ];\n\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7';\n      const response = await axios.get(url).then(res => {\n        const facings = res.data;\n        if (!response.ok) {\n          throw new Error('Something went wrong!');\n        }\n\n        // .then((response)=>{console.log(response)});\n        // const response = await fetch('https://swapi.dev/api/films/');\n        // const response = await fetch('https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7');\n\n        // if (!response.ok) {\n        //   throw new Error('Something went wrong!');\n        // }\n\n        const data = facings.json();\n        const transformedPlanogram = facings.results.map(planogramData => {\n          return {\n            gondola: planogramData.gondola,\n            shelf: planogramData.shelf,\n            facing: planogramData.facing,\n            upc: planogramData.upc\n          };\n        });\n        setPlanograms(transformedPlanogram);\n      });\n      console.log(planograms);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no planograms.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 17\n  }, this);\n  if (planograms.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(Gondola, {\n      items: planograms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlanogramsHandler,\n        children: \"FetchPlanogram\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n\n  // return (\n  //   <div>\n  //     <Gondula items={gondula} />\n  //   </div>\n  // );\n};\n_s(App, \"BKfEyclWaycz8D9RA0EywhB4Mmc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","axios","Gondola","App","planograms","setPlanograms","isLoading","setIsloading","error","setError","fetchPlanogramsHandler","url","response","get","then","res","facings","data","ok","Error","json","transformedPlanogram","results","map","planogramData","gondola","shelf","facing","upc","console","log","message","content","length"],"sources":["/Users/kevinchen/Documents/Projects/my-app/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Gondola from './components/Gondula/Gondola';\nconst App = () => {\n\n  const [planograms, setPlanograms] = useState([])\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  // const gondula = [\n  //   {\n  //     id: 'e1',\n  //     title: 'Paper',\n  //     amount: 94.12,\n  //     product: new Date(2020, 7, 14),\n  //   },\n  //   { id: 'e2',\n  //     title: 'New TV', \n  //     amount: 799.49, \n  //     product: new Date(2021, 2, 12) },\n  //   {\n  //     id: 'e3',\n  //     title: 'Car Insurance',\n  //     amount: 294.67,\n  //     product: new Date(2021, 2, 28),\n  //   },\n  //   {\n  //     id: 'e4',\n  //     title: 'New Desk (Wooden)',\n  //     amount: 450,\n  //     product: new Date(2021, 5, 12),\n  //   },\n  // ];\n\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7'\n      const response = await axios.get(url).then(res=> {\n        const facings = res.data;\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      // .then((response)=>{console.log(response)});\n      // const response = await fetch('https://swapi.dev/api/films/');\n      // const response = await fetch('https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7');\n      \n      // if (!response.ok) {\n      //   throw new Error('Something went wrong!');\n      // }\n\n      const data =  facings.json();\n      \n      const transformedPlanogram = facings.results.map(planogramData => {\n        return { \n          gondola: planogramData.gondola,\n          shelf: planogramData.shelf,\n          facing: planogramData.facing,\n          upc: planogramData.upc,\n        };\n      });\n\n      setPlanograms(transformedPlanogram);\n    })\n    console.log(planograms)\n\n   \n      \n\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n\n  let content = <p>Found no planograms.</p>;\n\n  if (planograms.length > 0) {\n    content = <Gondola items={planograms} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n     \n      <section>\n        <button onClick={fetchPlanogramsHandler}>FetchPlanogram</button>\n      </section>\n      <section>{content}</section>\n      {/* <div>\n        <Gondula planograms={planograms} />\n      </div> */}\n    </React.Fragment>\n  )\n\n  // return (\n  //   <div>\n  //     <Gondula items={gondula} />\n  //   </div>\n  // );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}