{"ast":null,"code":"// import React, { useCallback, useEffect, useState } from 'react';\n// // import NewExpense from './components/NewExpense/NewExpense';\n// import Store from './components/Store';\n\n// var logoImage = require('../src/imgs/LIVINGPOG.png')\n// var SungalImage = require('../src/imgs/SUNGAL.png')\n\n// const App = () => {\n\n// // fetch data\n//   const [planogram, setPlanogram] = useState([])\n//   const [isLoading, setIsloading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const transformPOGData = (data) =>{\n\n//     if (data.length === 0)return []\n\n//     let storeData = [], gondolaList = [], shelfList = []\n//     let currGondolaID = data[0][\"displayfixtureID\"]\n//     let currShelfID =   data[0][\"shelfID\"]\n\n//     // go through facings, placing them in groupings \n//     // according to gondola and shelf\n//     for (var facing of data) {\n\n//       if (facing[\"shelfID\"]!== currShelfID){\n//         gondolaList.push(shelfList)\n//         shelfList=[]\n//       }\n\n//       if (facing[\"displayfixtureID\"]!== currGondolaID){\n//         storeData.push(gondolaList)\n//         gondolaList=[]\n//       }\n\n//       currGondolaID = facing[\"displayfixtureID\"]\n//       currShelfID = facing[\"shelfID\"]\n\n//       shelfList.push(facing)\n//     }\n\n//     gondolaList.push(shelfList)\n//     storeData.push(gondolaList)\n\n//     return storeData\n//   }\n\n//   const fetchPlanogramsHandler = useCallback(async () => {\n//     setIsloading(true);\n//     setError(null);\n//     try {\n//       // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n//       const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n//       const response = await fetch(url);\n\n//       if (!response.ok) {\n//         throw new Error('Something went wrong!');\n//       }\n//       const POGfacings =  await response.json();\n//       console.log(\"POGfacings =\",POGfacings)      \n//       let POGdata = transformPOGData(POGfacings)\n\n//     setPlanogram(POGdata);\n\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsloading(false);\n//   }, []);\n\n//   useEffect(() => {\n//     fetchPlanogramsHandler();\n//   }, [fetchPlanogramsHandler]);\n\n//   let content = <p>Found no planograms.</p>;\n\n//   if (planogram.length > 0) {\n//     content = <Store gondolas={planogram} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading...</p>;\n//   }\n\n//   return (\n//     <React.Fragment>\n\n//       {/* <section >\n//         <button onClick={fetchPlanogramsHandler}>Refresh</button>\n//       </section>\n//         */}\n//       <div >\n//       <img  \n//             className=\"logo_img\" \n//             src={logoImage}\n//             alt = 'LogoImg'\n//             /> \n//       <img  \n//             className=\"sungal_img\" \n//             src={SungalImage} \n//             alt = 'SungalImg'\n//             /> \n\n//       </div>\n\n//       <section>\n//         {content}\n//       </section>\n\n//     </React.Fragment>\n//   )\n\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport { AppContext } from \"./lib/contextLib\";\nconst [isAuthenticated, userHasAuthenticated] = useState(false);","map":{"version":3,"names":["React","useState","AppContext","isAuthenticated","userHasAuthenticated"],"sources":["/Users/kevinchen/Documents/Projects/LPOGWebApp/src/App.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from 'react';\n// // import NewExpense from './components/NewExpense/NewExpense';\n// import Store from './components/Store';\n\n// var logoImage = require('../src/imgs/LIVINGPOG.png')\n// var SungalImage = require('../src/imgs/SUNGAL.png')\n\n\n\n// const App = () => {\n\n\n// // fetch data\n//   const [planogram, setPlanogram] = useState([])\n//   const [isLoading, setIsloading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const transformPOGData = (data) =>{\n\n//     if (data.length === 0)return []\n\n//     let storeData = [], gondolaList = [], shelfList = []\n//     let currGondolaID = data[0][\"displayfixtureID\"]\n//     let currShelfID =   data[0][\"shelfID\"]\n\n//     // go through facings, placing them in groupings \n//     // according to gondola and shelf\n//     for (var facing of data) {\n      \n//       if (facing[\"shelfID\"]!== currShelfID){\n//         gondolaList.push(shelfList)\n//         shelfList=[]\n//       }\n\n//       if (facing[\"displayfixtureID\"]!== currGondolaID){\n//         storeData.push(gondolaList)\n//         gondolaList=[]\n//       }\n     \n//       currGondolaID = facing[\"displayfixtureID\"]\n//       currShelfID = facing[\"shelfID\"]\n\n//       shelfList.push(facing)\n//     }\n\n//     gondolaList.push(shelfList)\n//     storeData.push(gondolaList)\n    \n//     return storeData\n//   }\n\n\n\n//   const fetchPlanogramsHandler = useCallback(async () => {\n//     setIsloading(true);\n//     setError(null);\n//     try {\n//       // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n//       const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb'\n//       const response = await fetch(url);\n\n//       if (!response.ok) {\n//         throw new Error('Something went wrong!');\n//       }\n//       const POGfacings =  await response.json();\n//       console.log(\"POGfacings =\",POGfacings)      \n//       let POGdata = transformPOGData(POGfacings)\n\n//     setPlanogram(POGdata);\n\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsloading(false);\n//   }, []);\n\n//   useEffect(() => {\n//     fetchPlanogramsHandler();\n//   }, [fetchPlanogramsHandler]);\n\n\n\n\n\n//   let content = <p>Found no planograms.</p>;\n\n//   if (planogram.length > 0) {\n//     content = <Store gondolas={planogram} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading...</p>;\n//   }\n\n\n\n\n\n//   return (\n//     <React.Fragment>\n\n//       {/* <section >\n//         <button onClick={fetchPlanogramsHandler}>Refresh</button>\n//       </section>\n//         */}\n//       <div >\n//       <img  \n//             className=\"logo_img\" \n//             src={logoImage}\n//             alt = 'LogoImg'\n//             /> \n//       <img  \n//             className=\"sungal_img\" \n//             src={SungalImage} \n//             alt = 'SungalImg'\n//             /> \n\n//       </div>\n      \n\n//       <section>\n//         {content}\n//       </section>\n     \n//     </React.Fragment>\n//   )\n\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport { AppContext } from \"./lib/contextLib\";\n\nconst [isAuthenticated, userHasAuthenticated] = useState(false);"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAMA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,MAAM,CAACC,eAAe,EAAEC,oBAAoB,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}