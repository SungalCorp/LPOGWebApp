{"ast":null,"code":"var _jsxFileName = \"/Users/danrothman/Downloads/LPOGWebApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Store from './components/Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [planogram, setPlanogram] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7'\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7';\n\n      // const response = await fetch('https://swapi.dev/api/films/');\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const POGfacings = await response.json();\n      console.log(\"POGfacings =\", POGfacings);\n      let transformPOGData = data => {\n        if (data.length === 0) return [];\n        let storeData = [],\n          gondolaList = [],\n          shelfList = [];\n        let currGondolaID = data[0][\"displayfixtureID\"];\n        let currShelfID = data[0][\"shelfID\"];\n\n        // go through facings, placing them in groupings \n        // according to gondola and shelf\n        for (var facing of data) {\n          if (facing[\"displayfixtureID\"] !== currGondolaID) {\n            gondolaList.push(shelfList);\n            shelfList = [];\n            storeData.push(gondolaList);\n            gondolaList = [];\n          } else {\n            if (facing[\"shelfID\"] !== currShelfID) {\n              gondolaList.push(shelfList);\n              shelfList = [];\n            }\n          }\n          currGondolaID = facing[\"displayfixtureID\"];\n          currShelfID = facing[\"shelfID\"];\n          shelfList.push(facing);\n        }\n        gondolaList.push(shelfList);\n        storeData.push(gondolaList);\n        return storeData;\n      };\n      let POGdata = transformPOGData(POGfacings);\n      setPlanogram(POGdata);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no planograms.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 17\n  }, this);\n  if (planogram.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(Store, {\n      gondolas: planogram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPlanogramsHandler,\n        children: \"FetchPlanogram\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4Xajw4Rqf5WU/rQQFR8/XIo+LCw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","Store","App","planogram","setPlanogram","isLoading","setIsloading","error","setError","fetchPlanogramsHandler","url","response","fetch","ok","Error","POGfacings","json","console","log","transformPOGData","data","length","storeData","gondolaList","shelfList","currGondolaID","currShelfID","facing","push","POGdata","message","content"],"sources":["/Users/danrothman/Downloads/LPOGWebApp/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n// import NewExpense from './components/NewExpense/NewExpense';\nimport Store from './components/Store';\nconst App = () => {\n\n  const [planogram, setPlanogram] = useState([])\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const fetchPlanogramsHandler = useCallback(async () => {\n    setIsloading(true);\n    setError(null);\n    try {\n      // const url = 'https://apiserver.sungalcorp.synology.me/dbGet_planogram?filter=storeID=7'\n      const url = 'https://apiserver.sungalcorp.synology.me/dbGet_displaymatrixforweb?filter=storeID=7'\n\n      // const response = await fetch('https://swapi.dev/api/films/');\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const POGfacings =  await response.json();\n      console.log(\"POGfacings =\",POGfacings)\n\n\n      let transformPOGData = (data) =>{\n\n          if (data.length === 0)return []\n\n          let storeData = [], gondolaList = [], shelfList = []\n          let currGondolaID = data[0][\"displayfixtureID\"]\n          let currShelfID =   data[0][\"shelfID\"]\n\n          // go through facings, placing them in groupings \n          // according to gondola and shelf\n          for (var facing of data) {\n            if (facing[\"displayfixtureID\"]!== currGondolaID){\n              gondolaList.push(shelfList)\n              shelfList=[]\n              storeData.push(gondolaList)\n              gondolaList=[]\n            }\n            else{\n              if (facing[\"shelfID\"]!== currShelfID){\n                gondolaList.push(shelfList)\n                shelfList=[]\n              }\n            }\n            currGondolaID = facing[\"displayfixtureID\"]\n            currShelfID = facing[\"shelfID\"]\n            shelfList.push(facing)\n            \n          }\n          gondolaList.push(shelfList)\n          storeData.push(gondolaList)\n  \n          return storeData\n      }\n      \n      let POGdata = transformPOGData(POGfacings)\n      \n    \n    setPlanogram(POGdata);\n\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsloading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchPlanogramsHandler();\n  }, [fetchPlanogramsHandler]);\n\n  let content = <p>Found no planograms.</p>;\n\n  if (planogram.length > 0) {\n    content = <Store gondolas={planogram} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n\n      <section>\n        <button onClick={fetchPlanogramsHandler}>FetchPlanogram</button>\n      </section>\n      <section>{content}</section>\n     \n    </React.Fragment>\n  )\n\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}